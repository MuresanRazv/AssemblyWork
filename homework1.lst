     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 03                          a db 3
    14 00000001 0500                        b dw 5
    15 00000003 0A000000                    c dd 10
    16 00000007 07                          d db 7
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; clean EAX for later division
    22 00000000 B800000000                      mov EAX, 0
    23                                          
    24                                          ; (a + b) * c / d - (a * b)
    25                                          
    26                                          ; (a + b) -> AX
    27 00000005 B400                            mov AH, 0
    28 00000007 A0[00000000]                    mov AL, byte[a]
    29 0000000C 660305[01000000]                add AX, word[b]
    30                                          
    31                                          ; (a + b) * c
    32                                          ;    |      |
    33                                          ;  word * dword => EDX:EAX
    34                                          
    35 00000013 F725[03000000]                  mul dword[c]
    36                                          
    37                                          ; (a + b) * c / d
    38                                          ;  ----------   | 
    39                                          ;       |      byte
    40                                          ;       |
    41                                          ;    EDX:EAX: dword
    42                                  
    43 00000019 BB00000000                      mov EBX, 0
    44 0000001E 8A1D[07000000]                  mov BL, byte[d]
    45 00000024 F7F3                            div EBX
    46                                          
    47                                          ; (a + b) * c / d - (a * b)
    48                                          ;  --------------      |
    49                                          ;         |            |
    50                                          ;         |         byte * word: DX:AX
    51                                          ;         |
    52                                          ;      EDX:EAX: dword
    53                                          
    54                                          ; move (a + b) * c / d to ECX:EBX and store (a * b) in DX:AX
    55 00000026 89D1                            mov ECX, EDX
    56 00000028 89C3                            mov EBX, EAX
    57 0000002A BA00000000                      mov EDX, 0
    58                                          
    59                                          ; store a in EAX
    60 0000002F B800000000                      mov EAX, 0
    61                                          ; a - byte => 
    62 00000034 A0[00000000]                    mov AL, byte[a]
    63 00000039 66F725[01000000]                mul word[b]
    64                                          
    65                                          ; now subtract (a * b) from ECX:EBX
    66 00000040 29C3                            sub EBX, EAX
    67                                          
    68                                          ; exit(0)
    69 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
